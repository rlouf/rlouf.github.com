<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>/dev/null</title>
    <link>http://rlouf.github.com/</link>
    <description>Recent content on /dev/null</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Jan 2019 13:19:11 +0100</lastBuildDate>
    
	<atom:link href="http://rlouf.github.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Massively parallel MCMC with JAX</title>
      <link>http://rlouf.github.com/post/jax-random-walk-metropolis/</link>
      <pubDate>Wed, 09 Jan 2019 13:19:11 +0100</pubDate>
      
      <guid>http://rlouf.github.com/post/jax-random-walk-metropolis/</guid>
      <description>TL;DR JAX blows everyone out of the water, by up to a factor of 20 in extreme cases (1,000 samples with 1,000,000 chains). Numpy wins in the small number of samples, small number of chains regime due to JAX&#39;s JIT compilation overhead. I report results for tensorflow probability (tfp), but keep in mind this is an unfair comparison since its implementation of random walk metroplis includes more bells and whistles than ours.</description>
    </item>
    
  </channel>
</rss>